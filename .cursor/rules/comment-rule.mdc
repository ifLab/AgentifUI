---
description: Must read when writing code comments or documenting functions
alwaysApply: false
---

# 注释规范

## 核心要求

- **语言**: 所有注释必须使用英文
- **目的**: 解释*为什么*，而不仅仅是*做什么*
- **风格**: 简洁明了
- **格式**: 接口/函数使用JSDoc，逻辑使用简单注释

## 标准格式

### JSDoc - 接口和类型
```typescript
/**
 * Chat message data structure
 * @description Contains message basic information and persistence-related fields
 */
export interface ChatMessage {
  /** Unique message ID (generated by frontend) */
  id: string;
  /** Message content */
  text: string;
  /** Whether this is a user message */
  isUser: boolean;
}
```

### JSDoc - 函数
```typescript
/**
 * Send chat message to Dify API with streaming response
 * 
 * @param payload - Request payload to send to Dify API
 * @param appId - Dify application ID
 * @returns Promise containing async generator and conversation metadata
 * @throws Error if fetch request fails or API returns error status
 */
export async function streamDifyChat(
  payload: DifyChatRequestPayload,
  appId: string
): Promise<DifyStreamResponse> {
  // Implementation...
}
```

### 简单注释 - 逻辑说明
```typescript
// Check response status, throw error if not 2xx
if (!response.ok) {
  throw new Error(`API request failed: ${response.status}`);
}

// Extract conversation_id from message_end event
if (event.conversation_id && !conversationId) {
  conversationId = event.conversation_id;
}
```

### 文件头注释
```typescript
/**
 * Dify Chat Service
 * @description Implements interaction logic with Dify chat-related APIs
 * @module lib/services/dify/chat-service
 */
```

## 禁止模式

❌ **不要使用这些模式:**
```typescript
// --- BEGIN COMMENT ---
// Complex comment with separators
// --- END COMMENT ---

// TODO: Fix this later
// FIXME: Broken implementation
// HACK: Temporary workaround
```

✅ **使用这些替代:**
```typescript
/**
 * Standard JSDoc comment
 */

// Simple inline comment

// @future Consider implementing this feature
```

## 最佳实践

1. **注释位置**: 在描述的代码之前放置注释
2. **注释内容**: 关注**为什么**而不是**做什么**
3. **保持更新**: 代码变更时同步更新注释
4. **删除过时**: 移除过时或显而易见的注释
5. **术语一致**: 在整个项目中使用一致的术语

## 目标

主要目标是创建**自文档化代码**，使其易于理解和维护。使用注释时要仔细考虑，以增强代码清晰度，而不会使代码库混乱。


```

Following these comment standards will make responsive design intentions clearer and improve code readability and maintainability.

# 注释规范

## 核心要求

- **语言**: 所有注释必须使用英文
- **目的**: 解释*为什么*，而不仅仅是*做什么*
- **风格**: 简洁明了
- **格式**: 接口/函数使用JSDoc，逻辑使用简单注释

## 标准格式

### JSDoc - 接口和类型
```typescript
/**
 * Chat message data structure
 * @description Contains message basic information and persistence-related fields
 */
export interface ChatMessage {
  /** Unique message ID (generated by frontend) */
  id: string;
  /** Message content */
  text: string;
  /** Whether this is a user message */
  isUser: boolean;
}
```

### JSDoc - 函数
```typescript
/**
 * Send chat message to Dify API with streaming response
 * 
 * @param payload - Request payload to send to Dify API
 * @param appId - Dify application ID
 * @returns Promise containing async generator and conversation metadata
 * @throws Error if fetch request fails or API returns error status
 */
export async function streamDifyChat(
  payload: DifyChatRequestPayload,
  appId: string
): Promise<DifyStreamResponse> {
  // Implementation...
}
```

### 简单注释 - 逻辑说明
```typescript
// Check response status, throw error if not 2xx
if (!response.ok) {
  throw new Error(`API request failed: ${response.status}`);
}

// Extract conversation_id from message_end event
if (event.conversation_id && !conversationId) {
  conversationId = event.conversation_id;
}
```

### 文件头注释
```typescript
/**
 * Dify Chat Service
 * @description Implements interaction logic with Dify chat-related APIs
 * @module lib/services/dify/chat-service
 */
```

## 禁止模式

❌ **不要使用这些模式:**
```typescript
// --- BEGIN COMMENT ---
// Complex comment with separators
// --- END COMMENT ---

// TODO: Fix this later
// FIXME: Broken implementation
// HACK: Temporary workaround
```

✅ **使用这些替代:**
```typescript
/**
 * Standard JSDoc comment
 */

// Simple inline comment

// @future Consider implementing this feature
```

## 最佳实践

1. **注释位置**: 在描述的代码之前放置注释
2. **注释内容**: 关注**为什么**而不是**做什么**
3. **保持更新**: 代码变更时同步更新注释
4. **删除过时**: 移除过时或显而易见的注释
5. **术语一致**: 在整个项目中使用一致的术语

## 目标

主要目标是创建**自文档化代码**，使其易于理解和维护。使用注释时要仔细考虑，以增强代码清晰度，而不会使代码库混乱。

---
description: 
globs: 
alwaysApply: true
---
# Comment Rule

## Core Requirements

- **Language**: All comments MUST be in English
- **Purpose**: Explain *why*, not just *what* (unless complex)
- **Style**: Concise and clear
- **Format**: Use standard JSDoc for interfaces/functions, simple comments for logic

## Standard Comment Formats

### JSDoc for Interfaces and Types

```typescript
/**
 * Chat message data structure
 * @description Contains message basic information and persistence-related fields
 */
export interface ChatMessage {
  /** Unique message ID (generated by frontend) */
  id: string;
  /** Message content */
  text: string;
  /** Whether this is a user message */
  isUser: boolean;
}
```

### JSDoc for Functions

```typescript
/**
 * Send chat message to Dify API with streaming response
 * 
 * @param payload - Request payload to send to Dify API
 * @param appId - Dify application ID
 * @param onConversationIdReceived - Optional callback when conversationId is received
 * @returns Promise containing async generator and conversation metadata
 * @throws Error if fetch request fails or API returns error status
 */
export async function streamDifyChat(
  payload: DifyChatRequestPayload,
  appId: string,
  onConversationIdReceived?: (id: string) => void
): Promise<DifyStreamResponse> {
  // Implementation...
}
```

### Simple Comments for Logic

```typescript
// Check response status, throw error if not 2xx
if (!response.ok) {
  throw new Error(`API request failed: ${response.status}`);
}

// Extract conversation_id and task_id from message_end event
if (event.conversation_id && !conversationId) {
  conversationId = event.conversation_id;
}
```

### File Header Comments

```typescript
/**
 * Dify Chat Service
 * @description Implements interaction logic with Dify chat-related APIs
 * @module lib/services/dify/chat-service
 */
```

## Tailwind CSS Comment Standards

### Class Grouping

```tsx
<div className={cn(
  // Base styles
  "bg-white rounded-lg shadow-md",
  
  // Responsive layout
  "flex flex-col md:flex-row lg:items-center",
  
  // Responsive spacing
  "p-4 md:p-6 lg:p-8",
  
  // Conditional styles
  isActive && "border-blue-500 border-2"
)}>
```

### Responsive Component Comments

```tsx
{/* Mobile navigation - hidden behind hamburger menu */}
{isMobileView && <MobileNavigation />}

{/* Desktop navigation - always visible */}
{!isMobileView && <DesktopNavigation />}
```

### Complex Layout Logic

```tsx
{/* 
  Responsive layout strategy:
  - Mobile: single column, image top, text below
  - Tablet+: two columns, image left, text right
*/}
<div className="flex flex-col md:flex-row">
  {/* Content */}
</div>
```

## React Component Documentation

### Component Props Documentation

```tsx
/**
 * Chat loader component properties
 * @description Defines the props interface for the chat loader component
 */
interface ChatLoaderProps {
  /** Message list to display */
  messages: ChatMessage[];
  /** Whether waiting for response */
  isWaitingForResponse?: boolean;
  /** Custom CSS class name */
  className?: string;
}

/**
 * Chat loader component
 * @description Renders chat message list with streaming updates and auto-scroll
 * 
 * @features
 * - Auto-scroll to latest messages
 * - Streaming message updates
 * - Loading states
 * - Error handling
 */
export const ChatLoader = ({ messages, isWaitingForResponse }: ChatLoaderProps) => {
  // Implementation...
};
```

## Forbidden Patterns

❌ **Do NOT use these patterns:**

```typescript
// --- BEGIN COMMENT ---
// Complex comment with separators
// --- END COMMENT ---

// TODO: Fix this later
// FIXME: Broken implementation
// HACK: Temporary workaround
```

✅ **Use these instead:**

```typescript
/**
 * Standard JSDoc comment
 */

// Simple inline comment

// @future Consider implementing this feature
```

## Best Practices

### 1. Comment Placement
- Place comments **before** the code they describe
- Use JSDoc for public APIs (functions, interfaces, classes)
- Use simple comments for internal logic

### 2. Comment Content
- Focus on **why** rather than **what**
- Explain business logic and complex algorithms
- Document edge cases and important assumptions

### 3. Maintenance
- Keep comments up-to-date with code changes
- Remove outdated or obvious comments
- Use consistent terminology throughout

### 4. Examples of Good Comments

```typescript
// Validate user permissions before allowing access
if (!hasPermission(user, 'admin')) {
  throw new UnauthorizedError();
}

// Batch updates to improve performance with large datasets
const batchSize = 100;
for (let i = 0; i < items.length; i += batchSize) {
  await processBatch(items.slice(i, i + batchSize));
}

/**
 * Cache service configuration
 * @description TTL is set to 5 minutes to balance performance and data freshness
 */
const CACHE_TTL = 5 * 60 * 1000;
```

## Goal

The primary goal is to create **self-documenting code** that is easy to understand and maintain. Use comments thoughtfully to enhance code clarity without cluttering the codebase.


```

Following these comment standards will make responsive design intentions clearer and improve code readability and maintainability.


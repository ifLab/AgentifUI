---
description: Must read before making any database schema changes or migrations
alwaysApply: false
---
# Supabase 数据库开发规范

## 核心原则

1. **安全优先**: 所有数据库操作必须经过充分评估和测试
2. **类型同步**: 数据库结构变更必须同步更新TypeScript类型定义
3. **文档同步**: 所有变更必须及时更新相关文档
4. **原子提交**: 迁移文件、类型定义和文档作为统一提交

## 完整开发流程

### 第一阶段：需求分析和影响评估

#### 1.1 需求理解
- 明确数据库变更的具体需求和目标
- 分析变更的业务背景和技术必要性
- 确定变更范围（表结构、索引、约束、函数等）

#### 1.2 影响评估
**数据库层面影响：**
- 表结构变更对现有数据的影响
- 外键约束和级联删除的影响
- 索引性能的影响
- RLS策略的影响

**应用层面影响：**
- 需要更新的TypeScript类型定义文件
- 需要修改的业务逻辑代码位置
- API接口兼容性影响
- 前端组件数据结构依赖

#### 1.3 风险评估
- **高风险操作**: DROP TABLE、ALTER COLUMN类型变更、删除约束
- **中风险操作**: ADD COLUMN、CREATE INDEX、修改RLS策略
- **低风险操作**: INSERT数据、UPDATE配置、CREATE FUNCTION

### 第二阶段：创建迁移文件

#### 2.1 获取标准时间戳
```bash
# 使用date命令获取标准格式时间戳
date +%Y%m%d%H%M%S
```

#### 2.2 创建迁移文件
迁移文件命名格式：`{timestamp}_{descriptive_name}.sql`

**示例：**
```
supabase/migrations/20250621091656_add_user_preferences_table.sql
```

#### 2.3 迁移文件编写规范

**文件头注释：**
```sql
-- Migration: 20250621091656_add_user_preferences_table.sql
-- Description: 添加用户偏好设置表，支持主题、语言等个性化配置
-- Impact: 新增表，不影响现有数据
-- Risk: 低风险
```

**必须包含检查：**
```sql
-- 检查表是否已存在
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'user_preferences'
    ) THEN
        -- 创建表的SQL语句
        CREATE TABLE user_preferences (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
            theme TEXT DEFAULT 'system',
            language TEXT DEFAULT 'zh-CN',
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
    END IF;
END $$;
```

**必须包含注释：**
```sql
-- 为新表/字段添加注释
COMMENT ON TABLE user_preferences IS '用户个性化偏好设置表';
COMMENT ON COLUMN user_preferences.theme IS '界面主题设置';
```

### 第三阶段：类型定义同步

#### 3.1 更新核心类型文件

必须检查和更新以下文件：

**`lib/types/database.ts`** - 核心数据库类型定义
- 更新相关接口定义
- 添加新的枚举类型
- 确保字段类型与数据库一致

**`lib/supabase/types.ts`** - Supabase自动生成类型
- 通常需要重新生成或手动同步
- 确保Row、Insert、Update类型完整

#### 3.2 类型定义更新示例

```typescript
// 在lib/types/database.ts中添加新接口
export interface UserPreference {
  id: string;
  user_id: string;
  theme: string;
  language: string;
  created_at: string;
  updated_at: string;
}

// 更新Database命名空间
export namespace Database {
  export interface Tables {
    // ... 现有表
    user_preferences: UserPreference;
  }
}
```

### 第四阶段：业务代码同步

#### 4.1 检查lib目录结构

必须检查以下目录中的相关文件：

**`lib/db/`** - 数据库操作层
- 检查是否需要添加新的数据访问函数
- 更新现有查询函数的类型定义
- 为新表添加CRUD操作

**`lib/hooks/`** - React Hooks层
- 检查是否需要添加新的自定义hooks
- 更新现有hooks的类型定义
- 确保数据获取逻辑正确

**`lib/services/`** - 服务层
- 检查是否需要更新业务逻辑服务
- 更新API调用的数据结构
- 确保服务间数据传输正确

#### 4.2 代码更新示例

```typescript
// lib/db/user-preferences.ts
import { Database } from '@lib/types/database';

type UserPreference = Database['Tables']['user_preferences'];

export async function getUserPreferences(userId: string): Promise<UserPreference | null> {
  // 实现数据访问逻辑
}

// lib/hooks/use-user-preferences.ts
export function useUserPreferences() {
  // 实现React Hook逻辑
}
```

### 第五阶段：测试和验证

#### 5.1 本地测试
```bash
# 推送迁移到本地数据库
supabase db push

# 检查迁移是否成功
supabase db status
```

#### 5.2 类型检查
```bash
# TypeScript类型检查
pnpm run type-check

# 构建测试
pnpm run build
```

#### 5.3 功能测试
- 测试新功能是否正常工作
- 验证现有功能是否受到影响
- 检查数据完整性

### 第六阶段：部署和文档

#### 6.1 提交变更
遵循git-commit-rule.mdc的格式：
```bash
git commit -m "feat(db): add user preferences table" \
           -m "" \
           -m "Add user_preferences table for theme and language settings" \
           -m "- Add migration file with proper checks" \
           -m "- Update TypeScript type definitions" \
           -m "- Add corresponding data access functions"
```

#### 6.2 部署到生产环境
```bash
# 部署到Supabase云端
supabase db push --linked
```

## 最佳实践

1. **渐进式变更**: 大的变更分解为多个小的迁移
2. **备份优先**: 重要变更前确保数据备份
3. **测试驱动**: 先在开发环境充分测试
4. **文档及时**: 变更完成后立即更新文档
5. **团队沟通**: 重大变更提前与团队沟通

## 紧急回滚

如果迁移出现问题：
```bash
# 查看迁移历史
supabase migration list

# 回滚到指定版本
supabase db reset --db-url [your-db-url]
```

遵循此规范将确保数据安全、类型一致和代码同步。


## Rule Maintenance

This rule will be continuously updated based on project development and best practice evolution. Any modifications to the rule must be discussed and confirmed by the team.
# Supabase 数据库开发规范

## 核心原则

1. **安全优先**: 所有数据库操作必须经过充分评估和测试
2. **类型同步**: 数据库结构变更必须同步更新TypeScript类型定义
3. **文档同步**: 所有变更必须及时更新相关文档
4. **原子提交**: 迁移文件、类型定义和文档作为统一提交

## 完整开发流程

### 第一阶段：需求分析和影响评估

#### 1.1 需求理解
- 明确数据库变更的具体需求和目标
- 分析变更的业务背景和技术必要性
- 确定变更范围（表结构、索引、约束、函数等）

#### 1.2 影响评估
**数据库层面影响：**
- 表结构变更对现有数据的影响
- 外键约束和级联删除的影响
- 索引性能的影响
- RLS策略的影响

**应用层面影响：**
- 需要更新的TypeScript类型定义文件
- 需要修改的业务逻辑代码位置
- API接口兼容性影响
- 前端组件数据结构依赖

#### 1.3 风险评估
- **高风险操作**: DROP TABLE、ALTER COLUMN类型变更、删除约束
- **中风险操作**: ADD COLUMN、CREATE INDEX、修改RLS策略
- **低风险操作**: INSERT数据、UPDATE配置、CREATE FUNCTION

### 第二阶段：创建迁移文件

#### 2.1 获取标准时间戳
```bash
# 使用date命令获取标准格式时间戳
date +%Y%m%d%H%M%S
```

#### 2.2 创建迁移文件
迁移文件命名格式：`{timestamp}_{descriptive_name}.sql`

**示例：**
```
supabase/migrations/20250621091656_add_user_preferences_table.sql
```

#### 2.3 迁移文件编写规范

**文件头注释：**
```sql
-- Migration: 20250621091656_add_user_preferences_table.sql
-- Description: 添加用户偏好设置表，支持主题、语言等个性化配置
-- Impact: 新增表，不影响现有数据
-- Risk: 低风险
```

**必须包含检查：**
```sql
-- 检查表是否已存在
DO $$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'user_preferences'
    ) THEN
        -- 创建表的SQL语句
        CREATE TABLE user_preferences (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
            theme TEXT DEFAULT 'system',
            language TEXT DEFAULT 'zh-CN',
            created_at TIMESTAMPTZ DEFAULT NOW(),
            updated_at TIMESTAMPTZ DEFAULT NOW()
        );
    END IF;
END $$;
```

**必须包含注释：**
```sql
-- 为新表/字段添加注释
COMMENT ON TABLE user_preferences IS '用户个性化偏好设置表';
COMMENT ON COLUMN user_preferences.theme IS '界面主题设置';
```

### 第三阶段：类型定义同步

#### 3.1 更新核心类型文件

必须检查和更新以下文件：

**`lib/types/database.ts`** - 核心数据库类型定义
- 更新相关接口定义
- 添加新的枚举类型
- 确保字段类型与数据库一致

**`lib/supabase/types.ts`** - Supabase自动生成类型
- 通常需要重新生成或手动同步
- 确保Row、Insert、Update类型完整

#### 3.2 类型定义更新示例

```typescript
// 在lib/types/database.ts中添加新接口
export interface UserPreference {
  id: string;
  user_id: string;
  theme: string;
  language: string;
  created_at: string;
  updated_at: string;
}

// 更新Database命名空间
export namespace Database {
  export interface Tables {
    // ... 现有表
    user_preferences: UserPreference;
  }
}
```

### 第四阶段：业务代码同步

#### 4.1 检查lib目录结构

必须检查以下目录中的相关文件：

**`lib/db/`** - 数据库操作层
- 检查是否需要添加新的数据访问函数
- 更新现有查询函数的类型定义
- 为新表添加CRUD操作

**`lib/hooks/`** - React Hooks层
- 检查是否需要添加新的自定义hooks
- 更新现有hooks的类型定义
- 确保数据获取逻辑正确

**`lib/services/`** - 服务层
- 检查是否需要更新业务逻辑服务
- 更新API调用的数据结构
- 确保服务间数据传输正确

#### 4.2 代码更新示例

```typescript
// lib/db/user-preferences.ts
import { Database } from '@lib/types/database';

type UserPreference = Database['Tables']['user_preferences'];

export async function getUserPreferences(userId: string): Promise<UserPreference | null> {
  // 实现数据访问逻辑
}

// lib/hooks/use-user-preferences.ts
export function useUserPreferences() {
  // 实现React Hook逻辑
}
```

### 第五阶段：测试和验证

#### 5.1 本地测试
```bash
# 推送迁移到本地数据库
supabase db push

# 检查迁移是否成功
supabase db status
```

#### 5.2 类型检查
```bash
# TypeScript类型检查
pnpm run type-check

# 构建测试
pnpm run build
```

#### 5.3 功能测试
- 测试新功能是否正常工作
- 验证现有功能是否受到影响
- 检查数据完整性

### 第六阶段：部署和文档

#### 6.1 提交变更
遵循git-commit-rule.mdc的格式：
```bash
git commit -m "feat(db): add user preferences table" \
           -m "" \
           -m "Add user_preferences table for theme and language settings" \
           -m "- Add migration file with proper checks" \
           -m "- Update TypeScript type definitions" \
           -m "- Add corresponding data access functions"
```

#### 6.2 部署到生产环境
```bash
# 部署到Supabase云端
supabase db push --linked
```

## 最佳实践

1. **渐进式变更**: 大的变更分解为多个小的迁移
2. **备份优先**: 重要变更前确保数据备份
3. **测试驱动**: 先在开发环境充分测试
4. **文档及时**: 变更完成后立即更新文档
5. **团队沟通**: 重大变更提前与团队沟通

## 紧急回滚

如果迁移出现问题：
```bash
# 查看迁移历史
supabase migration list

# 回滚到指定版本
supabase db reset --db-url [your-db-url]
```

遵循此规范将确保数据安全、类型一致和代码同步。


## Rule Maintenance

This rule will be continuously updated based on project development and best practice evolution. Any modifications to the rule must be discussed and confirmed by the team.

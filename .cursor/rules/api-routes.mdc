---
alwaysApply: false
---

# API Routes 规范

## 路由结构

```
app/api/
├── auth/               # 认证相关API
├── admin/              # 管理员API
└── dify/               # Dify API代理
    └── [appId]/[...slug]/
```

## 核心规范

### 1. 文件命名
- 使用 `route.ts` 作为API处理文件
- 动态路由使用 `[param]`，捕获所有路由使用 `[...slug]`

### 2. 处理函数
```typescript
// 标准HTTP方法导出
export async function GET(request: Request) {}
export async function POST(request: Request) {}
```

### 3. 响应格式
```typescript
// 统一响应结构
type ApiResponse<T> = {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
  };
};
```

### 4. 错误处理
- 使用标准HTTP状态码
- 提供清晰的错误信息
- 实现统一的错误响应格式

## 最佳实践

1. **请求验证**: 严格验证所有入站请求
2. **类型安全**: 使用TypeScript进行类型检查
3. **错误处理**: 实现统一的错误处理机制
4. **中间件**: 在 `middleware.ts` 中配置路由中间件

3. Handle streaming responses when necessary
4. Implement appropriate error handling and timeout handling

For example, see [app/api/dify/[appId]/[...slug]/route.ts](mdc:app/api/dify/[appId]/[...slug]/route.ts) for complete implementation.
# API Routes 规范

## 路由结构

```
app/api/
├── auth/               # 认证相关API
├── admin/              # 管理员API
└── dify/               # Dify API代理
    └── [appId]/[...slug]/
```

## 核心规范

### 1. 文件命名
- 使用 `route.ts` 作为API处理文件
- 动态路由使用 `[param]`，捕获所有路由使用 `[...slug]`

### 2. 处理函数
```typescript
// 标准HTTP方法导出
export async function GET(request: Request) {}
export async function POST(request: Request) {}
```

### 3. 响应格式
```typescript
// 统一响应结构
type ApiResponse<T> = {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
  };
};
```

### 4. 错误处理
- 使用标准HTTP状态码
- 提供清晰的错误信息
- 实现统一的错误响应格式

## 最佳实践

1. **请求验证**: 严格验证所有入站请求
2. **类型安全**: 使用TypeScript进行类型检查
3. **错误处理**: 实现统一的错误处理机制
4. **中间件**: 在 `middleware.ts` 中配置路由中间件

3. Handle streaming responses when necessary
4. Implement appropriate error handling and timeout handling

For example, see [app/api/dify/[appId]/[...slug]/route.ts](mdc:app/api/dify/[appId]/[...slug]/route.ts) for complete implementation.

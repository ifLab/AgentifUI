---
alwaysApply: false
---

# Dify API 集成规范

## 核心架构

三层架构处理Dify API集成：

1. **代理层**: `app/api/dify/[appId]/[...slug]/route.ts` - 处理认证和请求转发
2. **服务层**: `lib/services/dify/` - 业务逻辑和API调用
3. **类型层**: `lib/services/dify/types.ts` - TypeScript类型定义

## 主要服务模块

| 服务 | 文件 | 功能 |
|------|------|------|
| 聊天 | `chat-service.ts` | 聊天消息流式处理 |
| 工作流 | `workflow-service.ts` | 工作流执行和管理 |
| 应用 | `app-service.ts` | 应用参数和信息获取 |
| 消息 | `message-service.ts` | 消息管理和反馈 |
| 对话 | `conversation-service.ts` | 对话列表和管理 |
| 文本生成 | `completion-service.ts` | 文本生成和流式输出 |

## 使用模式

### 导入服务
```typescript
// 统一入口导入
import { streamDifyChat, getDifyAppParameters } from '@lib/services/dify';

// 或从特定服务文件导入
import { streamDifyChat } from '@lib/services/dify/chat-service';
```

### 错误处理
```typescript
try {
  const result = await someService(appId, params);
} catch (error) {
  if (error.status === 401) {
    // 处理认证错误
  } else if (error.status === 429) {
    // 处理限流错误
  }
}
```

### 类型安全
所有API相关类型定义在 `lib/services/dify/types.ts`：
- 请求类型: `Dify*RequestPayload`
- 响应类型: `Dify*Response`
- SSE事件类型: `Dify*SseEvent`

## 开发规范

1. **新增端点**: 遵循现有服务文件的模式
2. **类型定义**: 在types.ts中定义所有相关类型
3. **错误处理**: 使用统一的错误处理机制
4. **文档更新**: 更新相关服务函数的JSDoc注释

- **Total Endpoints**: 25
- **Service Files**: 7
- **Supported App Types**: 5 (chatbot, agent, chatflow, workflow, text-generation)
- **Coverage**: 100% Dify API functionality
# Dify API 集成规范

## 核心架构

三层架构处理Dify API集成：

1. **代理层**: `app/api/dify/[appId]/[...slug]/route.ts` - 处理认证和请求转发
2. **服务层**: `lib/services/dify/` - 业务逻辑和API调用
3. **类型层**: `lib/services/dify/types.ts` - TypeScript类型定义

## 主要服务模块

| 服务 | 文件 | 功能 |
|------|------|------|
| 聊天 | `chat-service.ts` | 聊天消息流式处理 |
| 工作流 | `workflow-service.ts` | 工作流执行和管理 |
| 应用 | `app-service.ts` | 应用参数和信息获取 |
| 消息 | `message-service.ts` | 消息管理和反馈 |
| 对话 | `conversation-service.ts` | 对话列表和管理 |
| 文本生成 | `completion-service.ts` | 文本生成和流式输出 |

## 使用模式

### 导入服务
```typescript
// 统一入口导入
import { streamDifyChat, getDifyAppParameters } from '@lib/services/dify';

// 或从特定服务文件导入
import { streamDifyChat } from '@lib/services/dify/chat-service';
```

### 错误处理
```typescript
try {
  const result = await someService(appId, params);
} catch (error) {
  if (error.status === 401) {
    // 处理认证错误
  } else if (error.status === 429) {
    // 处理限流错误
  }
}
```

### 类型安全
所有API相关类型定义在 `lib/services/dify/types.ts`：
- 请求类型: `Dify*RequestPayload`
- 响应类型: `Dify*Response`
- SSE事件类型: `Dify*SseEvent`

## 开发规范

1. **新增端点**: 遵循现有服务文件的模式
2. **类型定义**: 在types.ts中定义所有相关类型
3. **错误处理**: 使用统一的错误处理机制
4. **文档更新**: 更新相关服务函数的JSDoc注释

- **Total Endpoints**: 25
- **Service Files**: 7
- **Supported App Types**: 5 (chatbot, agent, chatflow, workflow, text-generation)
- **Coverage**: 100% Dify API functionality
